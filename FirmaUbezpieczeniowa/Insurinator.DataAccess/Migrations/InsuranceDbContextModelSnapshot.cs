// <auto-generated />
using Insurinator.DataAccess;
using Insurinator.Models.Entities.InsuranceDefinitions;
using Insurinator.Models.Enums;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace Insurinator.DataAccess.Migrations
{
    [DbContext(typeof(InsuranceDbContext))]
    partial class InsuranceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Insurinator.Models.Entities.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Pesel");

                    b.Property<string>("Surname");

                    b.Property<string>("TelephoneNumber");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HashedPassword");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.InsuranceDefinitions.InsuranceDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("BasePricePerMonth");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("MaximumDuration");

                    b.Property<DateTime>("MinimumDuration");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("InsuranceDefinition");

                    b.HasDiscriminator<string>("Discriminator").HasValue("InsuranceDefinition");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.InsuranceEntries.InsuranceEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ClientId");

                    b.Property<long?>("DefinitionId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long?>("IssuerId");

                    b.Property<float>("PricePerMonth");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("IssuerId");

                    b.ToTable("InsuranceEntry");

                    b.HasDiscriminator<string>("Discriminator").HasValue("InsuranceEntry");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.InsuranceEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<long?>("InsuranceEntryId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceEntryId");

                    b.ToTable("InsuranceEvents");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.InsuranceDefinitions.PropertyInsuranceDefinition", b =>
                {
                    b.HasBaseType("Insurinator.Models.Entities.InsuranceDefinitions.InsuranceDefinition");

                    b.Property<int>("MaximumDeclaredValues");

                    b.Property<int>("MinimumConstructionYear");

                    b.ToTable("PropertyInsuranceDefinition");

                    b.HasDiscriminator().HasValue("PropertyInsuranceDefinition");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.InsuranceDefinitions.VehicleInsuranceDefinition", b =>
                {
                    b.HasBaseType("Insurinator.Models.Entities.InsuranceDefinitions.InsuranceDefinition");

                    b.Property<bool>("HasRoadAssistanceIncluded");

                    b.Property<float>("MaximumLitrage");

                    b.Property<float>("MinimumLitrage");

                    b.Property<int>("MinimumYear");

                    b.ToTable("VehicleInsuranceDefinition");

                    b.HasDiscriminator().HasValue("VehicleInsuranceDefinition");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.InsuranceEntries.PropertyInsuranceEntry", b =>
                {
                    b.HasBaseType("Insurinator.Models.Entities.InsuranceEntries.InsuranceEntry");

                    b.Property<string>("Address");

                    b.Property<int>("DeclaredValue");

                    b.Property<float>("SquareMeters");

                    b.ToTable("PropertyInsuranceEntry");

                    b.HasDiscriminator().HasValue("PropertyInsuranceEntry");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.InsuranceEntries.VehicleInsuranceEntry", b =>
                {
                    b.HasBaseType("Insurinator.Models.Entities.InsuranceEntries.InsuranceEntry");

                    b.Property<string>("CarPlate");

                    b.Property<float>("Litrage");

                    b.Property<string>("Make");

                    b.Property<int>("VehicleType");

                    b.Property<int>("YearOfProduction");

                    b.ToTable("VehicleInsuranceEntry");

                    b.HasDiscriminator().HasValue("VehicleInsuranceEntry");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.InsuranceEntries.InsuranceEntry", b =>
                {
                    b.HasOne("Insurinator.Models.Entities.Client", "Client")
                        .WithMany("Insurances")
                        .HasForeignKey("ClientId");

                    b.HasOne("Insurinator.Models.Entities.InsuranceDefinitions.InsuranceDefinition", "Definition")
                        .WithMany("InsuranceEntries")
                        .HasForeignKey("DefinitionId");

                    b.HasOne("Insurinator.Models.Entities.Employee", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId");
                });

            modelBuilder.Entity("Insurinator.Models.Entities.InsuranceEvent", b =>
                {
                    b.HasOne("Insurinator.Models.Entities.InsuranceEntries.InsuranceEntry", "InsuranceEntry")
                        .WithMany("Events")
                        .HasForeignKey("InsuranceEntryId");
                });
#pragma warning restore 612, 618
        }
    }
}
